<?php
/**
 * StoreUI class.
 *
 * @package StoreUI
 */

/**
 * Class StoreUI
 */
class StoreUI {
	private static $instance = null;
	private $license_key;
	private $wc_api_keys;
	private $app_password;
	private $server_url;
	private $debug_mode = true;

	private function __construct() {
		$this->license_key  = get_option( 'storeui_license_key' );
		$this->wc_api_keys  = get_option( 'storeui_wc_api_keys' );
		$this->app_password = get_option( 'storeui_app_password' );
		$this->server_url   = StoreUI_Loader::get_server_url();
		$this->debug_mode   = get_option( 'storeui_debug_mode', false );

		add_action( 'init', array( $this, 'init_cors' ) );
		add_action( 'admin_menu', array( $this, 'add_admin_menu' ) );
		add_action( 'admin_init', array( $this, 'register_settings' ) );
		add_action( 'admin_post_storeui_activate_license', array( $this, 'activate_license' ) );
		add_action( 'admin_post_storeui_deactivate_license', array( $this, 'deactivate_license' ) );
	}

	public static function get_instance() {
		if ( null === self::$instance ) {
			self::$instance = new self();
		}
		return self::$instance;
	}

	// Prevent cloning of the instance
	private function __clone() {}

	// Prevent unserializing of the instance
	public function __wakeup() {
		throw new \Exception( 'Cannot unserialize singleton' );
	}

	/**
	 * Initialize CORS handling.
	 */
	public function init_cors() {
		$cors = new StoreUI_CORS();
		$cors->init();
	}

	/**
	 * Register settings.
	 */
	public function register_settings() {
		register_setting( 'storeui_options', 'storeui_license_key' );
	}

	/**
	 * Add admin menu.
	 */
	public function add_admin_menu() {
		add_options_page(
			__( 'StoreUI Settings', 'storeui' ),
			__( 'StoreUI', 'storeui' ),
			'manage_options',
			'storeui',
			array( $this, 'settings_page' )
		);

		add_action( 'admin_post_storeui_activate_license', array( $this, 'activate_license' ) );
		add_action( 'admin_post_storeui_deactivate_license', array( $this, 'deactivate_license' ) );
	}

	/**
	 * Settings page content.
	 */
	public function settings_page() {
		// Check for messages
		$message = filter_input( INPUT_GET, 'message', FILTER_SANITIZE_FULL_SPECIAL_CHARS );
		if ( 'deactivated' === $message ) {
			add_settings_error(
				'storeui_messages',
				'storeui_license_deactivated',
				__( 'License deactivated successfully. All API keys have been removed.', 'storeui' ),
				'updated'
			);
		}

		?>
		<div class="wrap">
			<h1><?php echo esc_html( get_admin_page_title() ); ?></h1>
			<?php settings_errors( 'storeui_messages' ); ?>
			<?php if ( ! get_option( 'storeui_license_active' ) ) : ?>
				<form action="<?php echo esc_url( admin_url( 'admin-post.php' ) ); ?>" method="post">
					<input type="hidden" name="action" value="storeui_activate_license">
					<?php wp_nonce_field( 'storeui_activate_license', 'storeui_license_nonce' ); ?>
					<table class="form-table">
						<tr>
							<th scope="row">
								<label for="storeui_license_key"><?php esc_html_e( 'License Key', 'storeui' ); ?></label>
							</th>
							<td>
								<input type="text" id="storeui_license_key" name="storeui_license_key" 
									value="<?php echo esc_attr( get_option( 'storeui_license_key' ) ); ?>" 
									class="regular-text">
							</td>
						</tr>
					</table>
					<?php submit_button( __( 'Activate License', 'storeui' ) ); ?>
				</form>
			<?php else : ?>
				<h2><?php esc_html_e( 'Connection Status: Active', 'storeui' ); ?></h2>
				<p><?php esc_html_e( 'Your store is connected to StoreUI.', 'storeui' ); ?></p>
				<a href="<?php echo esc_url( $this->get_app_connect_url() ); ?>" 
					class="button button-primary" target="_blank">
					<?php esc_html_e( 'Access StoreUI App', 'storeui' ); ?>
				</a>
				<form action="<?php echo esc_url( admin_url( 'admin-post.php' ) ); ?>" 
					method="post" 
					style="margin-top: 20px;" 
					onsubmit="return confirm('<?php esc_attr_e( 'Are you sure you want to deactivate your StoreUI license? This will remove the API keys generated by StoreUI and disconnect your store from StoreUI.', 'storeui' ); ?>');">
					<input type="hidden" name="action" value="storeui_deactivate_license">
					<?php wp_nonce_field( 'storeui_deactivate_license', 'storeui_deactivate_nonce' ); ?>
					<?php submit_button( __( 'Deactivate License', 'storeui' ), 'secondary', 'submit', false ); ?>
				</form>
			<?php endif; ?>
		</div>
		<?php
	}

	/**
	 * Get the app connect URL.
	 *
	 * @return string
	 */
	private function get_app_connect_url() {
		$app_url = 'https://app.storeui.net/';
		$params  = array(
			'uid'      => $this->license_key,
			'site_url' => urlencode( get_site_url() ),
		);
		return add_query_arg( $params, $app_url );
	}

	/**
	 * Activate license.
	 */
	public function activate_license() {
		if (
			! isset( $_POST['storeui_license_nonce'] )
			|| ! wp_verify_nonce(
				sanitize_text_field( wp_unslash( $_POST['storeui_license_nonce'] ) ),
				'storeui_activate_license'
			)
		) {
			wp_die( 'Security check failed' );
		}

		if ( ! isset( $_POST['storeui_license_key'] ) ) {
			wp_die( 'License key is required' );
		}

		$license_key = sanitize_text_field( wp_unslash( $_POST['storeui_license_key'] ) );

		// Ensure the server URL is correctly formatted
		$server_url = rtrim( $this->server_url, '/' ) . '/wp-json/storeui/v1/verify-license';

		// Debug: Log the server URL
		if ( $this->debug_mode ) {
			error_log( 'StoreUI License Activation URL: ' . $server_url );
		}

		// Verify license with StoreUI.net
		$response = wp_remote_post(
			$server_url,
			array(
				'body' => array(
					'license_key' => $license_key,
					'site_url'    => get_site_url(),
				),
			)
		);

		// Debug: Log the response
		if ( $this->debug_mode ) {
			error_log( 'StoreUI License Activation Response: ' . print_r( $response, true ) );
		}

		if ( is_wp_error( $response ) ) {
			add_settings_error( 'storeui_messages', 'storeui_license_error', 'Failed to verify license: ' . $response->get_error_message(), 'error' );
		} else {
			$body = json_decode( wp_remote_retrieve_body( $response ), true );

			// Debug: Log the decoded body
			if ( $this->debug_mode ) {
				error_log( 'StoreUI License Activation Decoded Body: ' . print_r( $body, true ) );
			}

			if ( ! empty( $body['success'] ) ) {
				update_option( 'storeui_license_key', $license_key );
				update_option( 'storeui_license_active', true );

				// Always generate and send keys after successful activation
				$this->generate_and_send_keys();

				add_settings_error(
					'storeui_messages',
					'storeui_license_activated',
					'License activated successfully!',
					'updated'
				);
			} else {
				add_settings_error(
					'storeui_messages',
					'storeui_license_invalid',
					'Invalid license key.',
					'error'
				);
			}
		}

		set_transient( 'storeui_messages', get_settings_errors(), 30 );

		wp_redirect( admin_url( 'options-general.php?page=storeui' ) );
		exit;
	}

	/**
	 * Generate and send keys.
	 */
	private function generate_and_send_keys() {
		// Retrieve the saved WC API keys
		$wc_api_keys = get_option( 'storeui_wc_api_keys', array() );

		// Generate WC API keys if they don't exist
		if (
			empty( $wc_api_keys ) ||
			empty( $wc_api_keys['consumer_key'] ) ||
			empty( $wc_api_keys['consumer_secret'] )
		) {
			$this->generate_wc_api_keys();
			$wc_api_keys = get_option( 'storeui_wc_api_keys', array() );
		}

		// Generate app password if it doesn't exist
		if ( ! get_option( 'storeui_app_password' ) ) {
			$this->generate_app_password();
		}

		$current_username = wp_get_current_user()->user_login;

		$payload = array(
			'license_key'        => get_option( 'storeui_license_key' ),
			'site_url'           => get_site_url(),
			'wc_consumer_key'    => isset( $wc_api_keys['consumer_key'] ) ? $wc_api_keys['consumer_key'] : '',
			'wc_consumer_secret' => isset( $wc_api_keys['consumer_secret'] ) ? $wc_api_keys['consumer_secret'] : '',
			'wp_app_username'    => $current_username,
			'wp_app_password'    => get_option( 'storeui_app_password' ),
		);

		// Debug: Log the payload being sent
		if ( $this->debug_mode ) {
			error_log( 'StoreUI Send Keys Payload: ' . print_r( $payload, true ) );
		}

		$server_url = rtrim( $this->server_url, '/' ) . '/wp-json/storeui/v1/store-keys';
		if ( $this->debug_mode ) {
			error_log( 'StoreUI Server URL: ' . $server_url );
		}

		$response = wp_remote_post(
			$server_url,
			array(
				'body'        => wp_json_encode( $payload ),
				'headers'     => array( 'Content-Type' => 'application/json' ),
				'data_format' => 'body',
				'timeout'     => 30,
			)
		);

		if ( is_wp_error( $response ) ) {
			if ( $this->debug_mode ) {
				error_log( 'StoreUI Send Keys Error: ' . $response->get_error_message() );
				error_log( 'StoreUI Send Keys Error Data: ' . print_r( $response->get_error_data(), true ) );
			}
		} else {
			$response_code = wp_remote_retrieve_response_code( $response );
			$body          = wp_remote_retrieve_body( $response );
			if ( $this->debug_mode ) {
				error_log( 'StoreUI Send Keys Response Code: ' . $response_code );
				error_log( 'StoreUI Send Keys Response Body: ' . $body );
			}

			$decoded_body = json_decode( $body, true );
			if ( json_last_error() === JSON_ERROR_NONE ) {
				if ( $this->debug_mode ) {
					error_log( 'StoreUI Send Keys Decoded Body: ' . print_r( $decoded_body, true ) );
				}
				if ( ! empty( $decoded_body['success'] ) ) {
					if ( $this->debug_mode ) {
						error_log( 'StoreUI Keys stored successfully' );
					}
				} else {
					if ( $this->debug_mode ) {
						error_log( 'StoreUI Failed to store keys' );
					}
				}
			} else {
				if ( $this->debug_mode ) {
					error_log( 'StoreUI Send Keys JSON Decode Error: ' . json_last_error_msg() );
				}
			}
		}
	}

	/**
	 * Generate WooCommerce API keys.
	 *
	 * @return array|WP_Error API key data on success, WP_Error on failure.
	 */
	private function generate_wc_api_keys() {
		global $wpdb;

		// Check if WooCommerce is active
		if ( ! class_exists( 'WooCommerce' ) ) {
			return new WP_Error( 'woocommerce_inactive', 'WooCommerce is not active. Cannot generate API keys.' );
		}

		$description = 'StoreUI Integration';
		$user_id     = get_current_user_id();
		$permissions = 'read_write';

		if ( ! function_exists( 'wc_rand_hash' ) || ! function_exists( 'wc_api_hash' ) ) {
			return new WP_Error( 'wc_functions_missing', 'Required WooCommerce functions are missing.' );
		}

		$consumer_key    = 'ck_' . wc_rand_hash();
		$consumer_secret = 'cs_' . wc_rand_hash();

		$data = array(
			'user_id'         => $user_id,
			'description'     => $description,
			'permissions'     => $permissions,
			'consumer_key'    => wc_api_hash( $consumer_key ),
			'consumer_secret' => $consumer_secret,
			'truncated_key'   => substr( $consumer_key, -7 ),
		);

		/**
		 * Filters the API key data before insertion.
		 *
		 * @param array $data The API key data to be inserted.
		 */
		$data = apply_filters( 'storeui_pre_insert_wc_api_key', $data );

		// Direct query is used here to maintain consistency with WooCommerce's API key creation process.
		$wpdb->insert(
			$wpdb->prefix . 'woocommerce_api_keys',
			$data,
			array(
				'%d',
				'%s',
				'%s',
				'%s',
				'%s',
				'%s',
			)
		);

		if ( 0 === $wpdb->insert_id ) {
			return new WP_Error( 'api_key_insert_error', 'There was an error generating your API Key.' );
		}

		$response = array(
			'key_id'          => $wpdb->insert_id,
			'user_id'         => $data['user_id'],
			'consumer_key'    => $consumer_key,
			'consumer_secret' => $consumer_secret,
			'key_permissions' => $data['permissions'],
		);

		update_option( 'storeui_wc_api_keys', $response );

		/**
		 * Action hook fired after inserting a WooCommerce API key.
		 *
		 * @param array $response The API key data that was inserted.
		 */
		do_action( 'storeui_after_insert_wc_api_key', $response );

		return $response;
	}

	/**
	 * Generate a new application password.
	 */
	private function generate_app_password() {
		if ( ! function_exists( 'wp_create_application_password' ) ) {
			//error_log( 'Application Passwords feature is not available. Using a regular password instead.' );
			$password = wp_generate_password( 16, false );
			update_option( 'storeui_app_password', $password );
			return;
		}

		$user     = wp_get_current_user();
		$app_name = 'StoreUI Integration';

		$password        = wp_generate_password( 16, false );
		$hashed_password = wp_hash_password( $password );

		$new_item = array(
			'name'      => $app_name,
			'password'  => $hashed_password,
			'created'   => time(),
			'last_used' => null,
			'last_ip'   => null,
		);

		$passwords = get_user_meta( $user->ID, '_application_passwords', true );
		if ( ! is_array( $passwords ) ) {
			$passwords = array();
		}
		$passwords[] = $new_item;

		update_user_meta( $user->ID, '_application_passwords', $passwords );
		update_option( 'storeui_app_password', $password );

		if ( $this->debug_mode ) {
			error_log( 'WordPress Application Password generated successfully.' );
		}
	}

	public function deactivate_license() {
		if (
			! isset( $_POST['storeui_deactivate_nonce'] )
			|| ! wp_verify_nonce( 
				sanitize_text_field( wp_unslash( $_POST['storeui_deactivate_nonce'] ) ),
				'storeui_deactivate_license'
			)
		) {
			wp_die( 'Security check failed' );
		}

		global $wpdb;

		// Get the stored WC API key details
		$wc_api_keys = get_option( 'storeui_wc_api_keys' );

		// Delete the WooCommerce API keys if they exist
		if ( ! empty( $wc_api_keys['key_id'] ) ) {
			// phpcs:disable WordPress.DB.DirectDatabaseQuery.DirectQuery
			// phpcs:disable WordPress.DB.DirectDatabaseQuery.NoCaching
			$wpdb->delete(
				$wpdb->prefix . 'woocommerce_api_keys',
				array( 'key_id' => $wc_api_keys['key_id'] ),
				array( '%d' )
			);
			// phpcs:enable
		}

		// Delete all StoreUI related options
		delete_option( 'storeui_license_key' );
		delete_option( 'storeui_license_active' );
		delete_option( 'storeui_wc_api_keys' );
		delete_option( 'storeui_app_password' );

		// Use wp_safe_redirect instead of wp_redirect
		wp_safe_redirect(
			add_query_arg(
				array(
					'page' => 'storeui',
					'message' => 'deactivated',
				),
				admin_url( 'options-general.php' )
			)
		);
		exit;
	}
}
